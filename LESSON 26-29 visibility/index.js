/*
-----------------------------------------------------------
ОБЛАСТЬ ВИДИМОСТИ 
область видимости определяет границы действия переменной !!!

Глобальные переменные vs Локальные переменные
Область видимости пример :

let a           a, b - глобальные переменные
let b

function  myFn() {
    let b               локальная переменная
    a = true
    b = 10
    console.log(b) -- 10
}

myFn()

console.log(a) -- true 
console.log(b) -- undefined
----------------------------------------------------------
ЦЕПОЧКА ОБЛАСТЕЙ ВИДИМОСТИ 

const a = 5

function myFn() {
    function innerFn() {
        console.log(a) -- 5
    }
    innerFn() -- не глобальная , поэтому объявляется внутри myFn
}

myFn() -- можно вызвать, поскольку была объявленна в глобальной области видимости
----------------------------------------------------------
Жизненный цикл переменных: шаг за шагом на переменную b 

let a          
let b          1-й шаг -- объявляется в глобальной области видимости , ее значение undefined

function  myFn() {
    let b                       3-й шаг -- объявление "b" в зоне видимости функции
    a = true
    b = 10                      4-й шаг -- объявлена ли "b" в рамках функции? ДА. ПРИСВОЕНИЕ ЭТОЙ ПЕРЕМЕННОЙ ЗНАЧЕНИЯ 10
    console.log(b) -- 10        5-й шаг -- "b" имеет значение 10 в области видимости функции
}

myFn()          2-й шаг -- вызов myFn

console.log(a) -- true 
console.log(b) -- undefined         6-й шаг -- "b" всё так же имеет значение undefined в глобальной области


let a           a, b - глобальные переменные
let b

Жизненный цикл переменных: шаг за шагом на переменную a

let a               1-й шаг -- объявляется в глобальной области видимости , ее значение undefined
let b 

function  myFn() {
    let b               
    a = true            3-й шаг -- Объявлена ли "a" в зоне видимости функции? НЕТ. Объявлена ли "a" во внешней области видимости? ДА. Присваивание глобального значения true переменной.
    b = 10
    console.log(a) -- true
}

myFn()              2-й шаг -- вызов myFn

console.log(a) -- true          4-й шаг -- "a" имеет значение true
console.log(b) -- undefined
*/